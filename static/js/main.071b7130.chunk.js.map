{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","App_Navbar","App_Input","id","App_Fetcher","url","App_Footer","React","Component","Fetcher","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movies","previous","runThis","bind","assertThisInitialized","axios","get","response","setState","data","results","console","log","className","map","movie","key","target","href","src","poster_path","alt","title","SearchResult","search","concat","Input","_this2","ready","input","handleType","handleClick","handleClear","handleEnter","handleKeyPress","event","value","document","addEventListener","removeEventListener","keyCode","type","placeholder","onChange","onClick","App_SearchResult","Navbar","Footer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.071b7130.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nlet base = \"https://api.themoviedb.org/3/search/movie?api_key=\";\nlet api = \"5f07da1ac6e04f73964142e3b1c32a76\";\nlet after_api = \"&query=\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Input />\n        <h1 id=\"popular\"> Popular </h1>\n        <Fetcher\n          url={\n            \"https://api.themoviedb.org/3/trending/\" +\n            \"movie/week?api_key=5f07da1ac6e04f73964142e3b1c32a76\"\n          }\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nclass Fetcher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      previous: \"\"\n    };\n    this.runThis = this.runThis.bind(this);\n  }\n\n  async runThis() {\n    if (this.props.url !== this.state.previous) {\n      let response = await axios.get(this.props.url);\n      this.setState({\n        movies: response.data.results,\n        previous: this.props.url\n      });\n    }\n  }\n\n  render() {\n    this.runThis();\n    console.log(this.state.movies);\n    let base_url = \"https://image.tmdb.org/t/p/w185\";\n    return (\n      <div className=\"container\">\n        {this.state.movies.map(movie => {\n          return (\n            <div key={movie.id} className=\"content\">\n              <a\n                target=\"_blank\"\n                href={\"https://www.themoviedb.org/movie/\" + movie.id}\n              >\n                <img src={base_url + movie.poster_path} alt={movie.title} />\n              </a>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst SearchResult = props => {\n  if (props.search !== \"\") {\n    console.log(props.search + \"Search Result\");\n    return <Fetcher url={\"\".concat(base, api, after_api, props.search)} />;\n  } else {\n    return null;\n  }\n};\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ready: \"\",\n      input: \"\"\n    };\n    this.handleType = this.handleType.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  handleType(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  handleClick() {\n    this.setState({\n      ready: this.state.input\n    });\n  }\n\n  handleClear() {\n    if (this.state.ready !== \"\") {\n      this.setState({\n        ready: \"\",\n        input: \"\"\n      });\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n  handleEnter() {\n    this.setState({\n      ready: this.state.input\n    });\n  }\n\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"field\">\n          <input\n            type=\"input\"\n            className=\"input\"\n            id=\"text\"\n            placeholder=\"Search Movies\"\n            value={this.state.input}\n            onChange={this.handleType}\n          />\n          <div className=\"buttondiv\">\n            <button className=\"btn\" onClick={this.handleClick}>\n              <i className=\"fa fa-search \" />\n              Search\n            </button>\n            <button className=\"btn\" onClick={this.handleClear}>\n              <i className=\"fa fa-trash\" />\n              Clear\n            </button>\n          </div>\n        </div>\n        {this.state.ready !== \"\" && (\n          <div>\n            <h1 id=\"search\"> Search Result</h1>\n            <SearchResult search={this.state.ready} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst Navbar = () => {\n  return (\n    <nav className=\"nav-bar\" id=\"nav-bar\">\n      <ul className=\"header-ul-list\">\n        <li className=\"nav-link\">\n          <a href=\"#search\">\n            <i className=\"fa fa-search\" />\n            Results\n          </a>\n        </li>\n        <li className=\"nav-link\">\n          <a href=\"#popular\">\n            <i className=\"fa fa-film\" />\n            Popular\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nconst Footer = () => {\n  return (\n    <footer>\n      <a className=\"aclass footer\" target=\"_blank\" href=\"github.com\">\n        <i className=\"fa fa-github\" /> Github\n      </a>\n    </footer>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}